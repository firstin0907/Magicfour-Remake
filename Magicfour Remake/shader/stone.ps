////////////////////////////////////////////////////////////////////////////////
// Filename: light.ps
////////////////////////////////////////////////////////////////////////////////

cbuffer LightBuffer
{
    float4 diffuseColor;
    float3 lightDirection;
	float padding;

    float4 ambientWeight;
    float4 diffuseWeight;
    float4 specularWeight;
};

cbuffer CameraBuffer
{
    float3 cameraPosition;
    float padding2;
}


//////////////
// TYPEDEFS //
//////////////
struct PixelInputType
{
    float4 position : SV_POSITION;
    float2 tex : TEXCOORD0;
	float3 normal : NORMAL;
};


////////////////////////////////////////////////////////////////////////////////
// Pixel Shader
////////////////////////////////////////////////////////////////////////////////
float4 psMain(PixelInputType input) : SV_TARGET
{
    float3 normal;
	float3 lightDir;
	float lightIntensity, specularIntensity;
	float4 color;

    float shininess = 10.0;

    normal = normalize(input.normal);
	// Invert the light direction for calculations.
    lightDir = normalize(-lightDirection);


    // ambient
    float4 ambient = 0.1 * diffuseColor * ambientWeight;
    
    // diffuse
    float diff = saturate(dot(normal, lightDir));
    float4 diffuse = diff * diffuseColor * diffuseWeight;

    // specular
    float4 white = {1, 1, 1, 1};
    float3 viewDir = normalize(cameraPosition - input.position);
    float3 halfDir = normalize(viewDir + lightDir);

    float spec =  pow(saturate(dot(halfDir, input.normal)), shininess);
    float4 specular = spec * white * specularWeight;

	return ambient + diffuse + specular;
}
