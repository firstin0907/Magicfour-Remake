Texture2D diffuseTexture : register(t0);
Texture2D normalTexture : register(t1);
Texture2D emissiveTexture : register(t2);
SamplerState SampleType : register(s0);

cbuffer LightBuffer
{
    float4 diffuseColor;
    float3 lightDirection;
    float padding;

    float4 ambientWeight;
    float4 diffuseWeight;
    float4 specularWeight;
};

cbuffer CameraBuffer
{
    float3 cameraPosition;
    float padding2;
}

struct PixelInputType
{
    float4 position : SV_POSITION;
    float2 tex : TEXCOORD0;
    float3 normal : NORMAL;
    float3 tangent : TANGENT;
    float3 binormal : BINORMAL;
};

float4 psMain(PixelInputType input) : SV_TARGET
{
    float4 textureColor;
    float4 bumpMap;
    float3 bumpNormal;
    float3 lightDir;
    float4 color;
    float shininess = 15.0;

    // Sample the pixel color from the color texture at this location.
    textureColor = diffuseTexture.Sample(SampleType, input.tex);
    // Sample the pixel from the normal map.
    bumpMap = normalTexture.Sample(SampleType, input.tex);
    // Expand the range of the normal value from (0, +1) to (-1, +1).
    bumpMap = (bumpMap * 2.0f) - 1.0f;

    float4 emissiveColor = emissiveTexture.Sample(SampleType, input.tex);

    lightDir = -lightDirection;

    // ambient
    float4 ambient = 0.1 * textureColor * ambientWeight;

    // diffuse
    bumpNormal = normalize((bumpMap.x * input.tangent) + (bumpMap.y * input.binormal) + (bumpMap.z * input.normal));
    float lightIntensity = saturate(dot(bumpNormal, lightDir));
    float4 diffuse = saturate(textureColor * lightIntensity) * diffuseWeight;

    // specular
    float4 white = {1, 1, 1, 1};
    float3 viewDir = normalize(cameraPosition - input.position);
    float3 reflectDir = normalize(lightDir - 2.0f * dot(input.normal, lightDir) * input.normal);
    float spec = pow(saturate(dot(viewDir, reflectDir)), shininess);
    float4 specular = spec * white * specularWeight;


    return ambient + diffuse + specular + emissiveColor;
}
